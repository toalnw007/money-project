{"ast":null,"code":"import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Chart = _resolveComponent(\"Chart\");\n  return _openBlock(), _createBlock(_component_Chart, {\n    type: \"bar\",\n    width: $props.width,\n    height: $props.height,\n    data: $setup.data,\n    options: $setup.options\n  }, null, 8 /* PROPS */, [\"width\", \"height\", \"data\", \"options\"]);\n}","map":{"version":3,"mappings":";;;uBACEA,aAMEC;IALAC,IAAI,EAAC,KAAK;IACTC,KAAK,EAAEC,YAAK;IACZC,MAAM,EAAED,aAAM;IACdE,IAAI,EAAEC,WAAI;IACVC,OAAO,EAAED","names":["_createBlock","_component_Chart","type","width","$props","height","data","$setup","options"],"sourceRoot":"","sources":["/Users/jisoo/Desktop/github/rocket-web/src/components/report-bar-chart-1/Main.vue"],"sourcesContent":["<template>\n  <Chart\n    type=\"bar\"\n    :width=\"width\"\n    :height=\"height\"\n    :data=\"data\"\n    :options=\"options\"\n  />\n</template>\n\n<script setup>\nimport { computed } from \"vue\";\nimport { useDarkModeStore } from \"@/stores/dark-mode\";\nimport { useColorSchemeStore } from \"@/stores/color-scheme\";\nimport { colors } from \"@/utils/colors\";\n\nconst props = defineProps({\n  width: {\n    type: [Number, String],\n    default: \"auto\",\n  },\n  height: {\n    type: [Number, String],\n    default: \"auto\",\n  },\n});\n\nconst darkMode = computed(() => useDarkModeStore().darkMode);\nconst colorScheme = computed(() => useColorSchemeStore().colorScheme);\n\nconst data = computed(() => {\n  const configData = {\n    labels: [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"],\n    datasets: [\n      {\n        barPercentage: 0.35,\n        data: [4, 7, 5, 4, 9, 7, 5],\n        borderWidth: 1,\n        borderColor: colorScheme.value ? colors.primary(0.7) : \"\",\n        backgroundColor: colorScheme.value ? colors.primary(0.11) : \"\",\n      },\n    ],\n  };\n\n  return darkMode.value ? configData : configData;\n});\n\nconst options = computed(() => {\n  return {\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        display: false,\n      },\n    },\n    scales: {\n      x: {\n        ticks: {\n          display: false,\n        },\n        grid: {\n          display: false,\n          drawBorder: false,\n        },\n      },\n      y: {\n        ticks: {\n          display: false,\n          beginAtZero: true,\n        },\n        grid: {\n          display: false,\n          drawBorder: false,\n        },\n      },\n    },\n  };\n});\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}