{"ast":null,"code":"import { normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, normalizeStyle as _normalizeStyle, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    style: _normalizeStyle({\n      width: `${$props.width}px`,\n      height: `${$props.height}px`\n    })\n  }, [_createElementVNode(\"canvas\", {\n    ref: \"chartRef\",\n    class: _normalizeClass($props.class)\n  }, null, 2 /* CLASS */)], 4 /* STYLE */);\n}","map":{"version":3,"mappings":";;uBACEA,oBAOM;IANHC,KAAK;gBAAoBC,YAAK;iBAAuBA,aAAM;;MAK5DC,oBAA+C;IAAvCC,GAAG,EAAC,UAAU;IAAEC,KAAK,kBAAEH,YAAK","names":["_createElementBlock","style","$props","_createElementVNode","ref","class"],"sourceRoot":"","sources":["/Users/jisoo/Desktop/github/rocket-web/src/global-components/chart/Main.vue"],"sourcesContent":["<template>\n  <div\n    :style=\"{\n      width: `${width}px`,\n      height: `${height}px`,\n    }\"\n  >\n    <canvas ref=\"chartRef\" :class=\"class\"></canvas>\n  </div>\n</template>\n\n<script setup>\nimport { onMounted, ref, inject, watch } from \"vue\";\nimport Chart from \"chart.js/auto\";\n\nconst props = defineProps({\n  type: {\n    type: String,\n    required: true,\n    default: \"line\",\n    validator: (value) => {\n      return [\"line\", \"pie\", \"doughnut\", \"bar\"].indexOf(value) !== -1;\n    },\n  },\n  data: {\n    type: Object,\n    required: true,\n    default: () => ({}),\n  },\n  options: {\n    type: Object,\n    default: () => ({}),\n  },\n  width: {\n    type: [Number, String],\n    default: \"auto\",\n  },\n  height: {\n    type: [Number, String],\n    default: \"auto\",\n  },\n  refKey: {\n    type: String,\n    default: null,\n  },\n  class: {\n    type: String,\n    default: \"\",\n  },\n});\n\nconst chartRef = ref();\nconst init = () => {\n  const canvas = chartRef.value?.getContext(\"2d\");\n  const chart = new Chart(canvas, {\n    type: props.type,\n    // data: $h.toRaw(props.data),\n    data: props.data,\n    options: props.options,\n  });\n\n  watch(props, () => {\n    // chart.data = $h.toRaw(props.data);\n    chart.data = props.data;\n    chart.options = props.options;\n    chart.update();\n  });\n\n  // Attach ChartJs instance\n  chartRef.value.instance = chart;\n};\n\nconst bindInstance = () => {\n  if (props.refKey) {\n    const bind = inject(`bind[${props.refKey}]`);\n    if (bind) {\n      bind(chartRef.value);\n    }\n  }\n};\n\nonMounted(() => {\n  bindInstance();\n  init();\n});\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}