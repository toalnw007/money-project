{"ast":null,"code":"import { computed, ref, provide } from \"vue\";\nimport { useDarkModeStore } from \"@/stores/dark-mode\";\nimport { useColorSchemeStore } from \"@/stores/color-scheme\";\nimport { colors } from \"@/utils/colors\";\nexport default {\n  __name: 'Main',\n  props: {\n    width: {\n      type: [Number, String],\n      default: \"auto\"\n    },\n    height: {\n      type: [Number, String],\n      default: \"auto\"\n    }\n  },\n  setup(__props, {\n    expose\n  }) {\n    expose();\n    const props = __props;\n    const darkMode = computed(() => useDarkModeStore().darkMode);\n    const colorScheme = computed(() => useColorSchemeStore().colorScheme);\n    const reportLineChart1Ref = ref();\n    provide(\"bind[reportLineChart1Ref]\", el => {\n      reportLineChart1Ref.value = el;\n    });\n    const getGradient = el => {\n      const ctx = el.getContext(\"2d\");\n      const gradient = ctx.createLinearGradient(0, 0, 0, 400);\n      gradient.addColorStop(0, colors.primary(0.11));\n      gradient.addColorStop(1, darkMode.value ? \"#28344e00\" : \"#ffffff01\");\n      return gradient;\n    };\n    const data = computed(() => {\n      return {\n        labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n        datasets: [{\n          data: [0, 350, 250, 200, 500, 450, 850, 1050, 950, 1100, 900, 1200],\n          borderWidth: 1,\n          borderColor: colorScheme.value ? colors.primary(0.7) : \"\",\n          pointRadius: 3.5,\n          pointBorderColor: colorScheme.value ? colors.primary(0.7) : \"\",\n          pointBackgroundColor: darkMode.value ? colors.darkmode[\"400\"]() : \"#ffffff\",\n          backgroundColor: reportLineChart1Ref.value ? getGradient(reportLineChart1Ref.value) : \"\",\n          tension: 0.3,\n          fill: true\n        }]\n      };\n    });\n    const options = computed(() => {\n      return {\n        maintainAspectRatio: false,\n        plugins: {\n          legend: {\n            display: false\n          }\n        },\n        scales: {\n          x: {\n            ticks: {\n              font: {\n                size: 12\n              },\n              color: colors.slate[\"500\"](0.8)\n            },\n            grid: {\n              display: false,\n              drawBorder: false\n            }\n          },\n          y: {\n            ticks: {\n              font: {\n                size: 12\n              },\n              color: colors.slate[\"500\"](0.8),\n              callback: function (value, index, values) {\n                return \"$\" + value;\n              }\n            },\n            grid: {\n              color: darkMode.value ? colors.slate[\"500\"](0.3) : colors.slate[\"300\"](),\n              borderDash: [2, 2],\n              drawBorder: false\n            }\n          }\n        }\n      };\n    });\n    const __returned__ = {\n      props,\n      darkMode,\n      colorScheme,\n      reportLineChart1Ref,\n      getGradient,\n      data,\n      options,\n      computed,\n      ref,\n      provide,\n      get useDarkModeStore() {\n        return useDarkModeStore;\n      },\n      get useColorSchemeStore() {\n        return useColorSchemeStore;\n      },\n      get colors() {\n        return colors;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"mappings":"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","names":["computed","ref","provide","useDarkModeStore","useColorSchemeStore","colors","darkMode","colorScheme","reportLineChart1Ref","el","value","getGradient","ctx","getContext","gradient","createLinearGradient","addColorStop","primary","data","labels","datasets","borderWidth","borderColor","pointRadius","pointBorderColor","pointBackgroundColor","darkmode","backgroundColor","tension","fill","options","maintainAspectRatio","plugins","legend","display","scales","x","ticks","font","size","color","slate","grid","drawBorder","y","callback","index","values","borderDash"],"sources":["/Users/jisoo/Desktop/github/rocket-web/src/global-components/report-line-chart-1/Main.vue"],"sourcesContent":["<template>\n  <Chart\n    type=\"line\"\n    :width=\"width\"\n    :height=\"height\"\n    :data=\"data\"\n    :options=\"options\"\n    ref-key=\"reportLineChart1Ref\"\n  />\n</template>\n\n<script setup>\nimport { computed, ref, provide } from \"vue\";\nimport { useDarkModeStore } from \"@/stores/dark-mode\";\nimport { useColorSchemeStore } from \"@/stores/color-scheme\";\nimport { colors } from \"@/utils/colors\";\n\nconst props = defineProps({\n  width: {\n    type: [Number, String],\n    default: \"auto\",\n  },\n  height: {\n    type: [Number, String],\n    default: \"auto\",\n  },\n});\n\nconst darkMode = computed(() => useDarkModeStore().darkMode);\nconst colorScheme = computed(() => useColorSchemeStore().colorScheme);\nconst reportLineChart1Ref = ref();\n\nprovide(\"bind[reportLineChart1Ref]\", (el) => {\n  reportLineChart1Ref.value = el;\n});\n\nconst getGradient = (el) => {\n  const ctx = el.getContext(\"2d\");\n  const gradient = ctx.createLinearGradient(0, 0, 0, 400);\n  gradient.addColorStop(0, colors.primary(0.11));\n  gradient.addColorStop(1, darkMode.value ? \"#28344e00\" : \"#ffffff01\");\n  return gradient;\n};\n\nconst data = computed(() => {\n  return {\n    labels: [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ],\n    datasets: [\n      {\n        data: [0, 350, 250, 200, 500, 450, 850, 1050, 950, 1100, 900, 1200],\n        borderWidth: 1,\n        borderColor: colorScheme.value ? colors.primary(0.7) : \"\",\n        pointRadius: 3.5,\n        pointBorderColor: colorScheme.value ? colors.primary(0.7) : \"\",\n        pointBackgroundColor: darkMode.value\n          ? colors.darkmode[\"400\"]()\n          : \"#ffffff\",\n        backgroundColor: reportLineChart1Ref.value\n          ? getGradient(reportLineChart1Ref.value)\n          : \"\",\n        tension: 0.3,\n        fill: true,\n      },\n    ],\n  };\n});\n\nconst options = computed(() => {\n  return {\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        display: false,\n      },\n    },\n    scales: {\n      x: {\n        ticks: {\n          font: {\n            size: 12,\n          },\n          color: colors.slate[\"500\"](0.8),\n        },\n        grid: {\n          display: false,\n          drawBorder: false,\n        },\n      },\n      y: {\n        ticks: {\n          font: {\n            size: 12,\n          },\n          color: colors.slate[\"500\"](0.8),\n          callback: function (value, index, values) {\n            return \"$\" + value;\n          },\n        },\n        grid: {\n          color: darkMode.value\n            ? colors.slate[\"500\"](0.3)\n            : colors.slate[\"300\"](),\n          borderDash: [2, 2],\n          drawBorder: false,\n        },\n      },\n    },\n  };\n});\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}