{"ast":null,"code":"import { computed, ref, provide } from \"vue\";\nexport default {\n  __name: 'Main',\n  props: {\n    width: {\n      type: [Number, String],\n      default: \"auto\"\n    },\n    height: {\n      type: [Number, String],\n      default: \"auto\"\n    }\n  },\n  setup(__props, {\n    expose\n  }) {\n    expose();\n    const props = __props;\n    const darkMode = computed(() => useDarkModeStore().darkMode);\n    const colorScheme = computed(() => useColorSchemeStore().colorScheme);\n    const reportLineChart1Ref = ref();\n    provide(\"bind[reportLineChart1Ref]\", el => {\n      reportLineChart1Ref.value = el;\n    });\n    const getGradient = el => {\n      const ctx = el.getContext(\"2d\");\n      const gradient = ctx.createLinearGradient(0, 0, 0, 400);\n      gradient.addColorStop(0, colors.primary(0.11));\n      gradient.addColorStop(1, darkMode.value ? \"#28344e00\" : \"#ffffff01\");\n      return gradient;\n    };\n    const data = computed(() => {\n      return {\n        labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n        datasets: [{\n          data: [0, 350, 250, 200, 500, 450, 850, 1050, 950, 1100, 900, 1200],\n          borderWidth: 1,\n          tension: 0.3,\n          pointBackgroundColor: \"#ffffff\",\n          backgroundColor: \"#91B4D2\",\n          fill: true\n        }]\n      };\n    });\n    const __returned__ = {\n      props,\n      darkMode,\n      colorScheme,\n      reportLineChart1Ref,\n      getGradient,\n      data,\n      computed,\n      ref,\n      provide\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"mappings":"AAYA,SAASA,QAAQ,EAAEC,GAAG,EAAEC,OAAO,QAAQ,KAAK;;;;;;;;;;;;;;;;;;IAa5C,MAAMC,QAAQ,GAAGH,QAAQ,CAAC,MAAMI,gBAAgB,EAAE,CAACD,QAAQ,CAAC;IAC5D,MAAME,WAAW,GAAGL,QAAQ,CAAC,MAAMM,mBAAmB,EAAE,CAACD,WAAW,CAAC;IACrE,MAAME,mBAAmB,GAAGN,GAAG,EAAE;IAEjCC,OAAO,CAAC,2BAA2B,EAAGM,EAAE,IAAK;MAC3CD,mBAAmB,CAACE,KAAK,GAAGD,EAAE;IAChC,CAAC,CAAC;IAEF,MAAME,WAAW,GAAIF,EAAE,IAAK;MAC1B,MAAMG,GAAG,GAAGH,EAAE,CAACI,UAAU,CAAC,IAAI,CAAC;MAC/B,MAAMC,QAAQ,GAAGF,GAAG,CAACG,oBAAoB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC;MACvDD,QAAQ,CAACE,YAAY,CAAC,CAAC,EAAEC,MAAM,CAACC,OAAO,CAAC,IAAI,CAAC,CAAC;MAC9CJ,QAAQ,CAACE,YAAY,CAAC,CAAC,EAAEZ,QAAQ,CAACM,KAAK,GAAG,WAAW,GAAG,WAAW,CAAC;MACpE,OAAOI,QAAQ;IACjB,CAAC;IAED,MAAMK,IAAI,GAAGlB,QAAQ,CAAC,MAAM;MAC1B,OAAO;QACLmB,MAAM,EAAE,CACN,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,CACN;QACDC,QAAQ,EAAE,CACR;UACEF,IAAI,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC;UACnEG,WAAW,EAAE,CAAC;UACdC,OAAO,EAAE,GAAG;UACZC,oBAAoB,EAAE,SAAS;UAC/BC,eAAe,EAAG,SAAS;UAC3BC,IAAI,EAAE;QACR,CAAC;MAEL,CAAC;IACH,CAAC,CAAC","names":["computed","ref","provide","darkMode","useDarkModeStore","colorScheme","useColorSchemeStore","reportLineChart1Ref","el","value","getGradient","ctx","getContext","gradient","createLinearGradient","addColorStop","colors","primary","data","labels","datasets","borderWidth","tension","pointBackgroundColor","backgroundColor","fill"],"sources":["/Users/jisoo/Desktop/github/rocket-web/src/components/report-line-chart-1/Main.vue"],"sourcesContent":["<template>\n  <Chart\n    type=\"line\"\n    :width=\"width\"\n    :height=\"height\"\n    :data=\"data\"\n    :options=\"options\"\n    ref-key=\"reportLineChart1Ref\"\n  />\n</template>\n\n<script setup>\nimport { computed, ref, provide } from \"vue\";\n\nconst props = defineProps({\n  width: {\n    type: [Number, String],\n    default: \"auto\",\n  },\n  height: {\n    type: [Number, String],\n    default: \"auto\",\n  },\n});\n\nconst darkMode = computed(() => useDarkModeStore().darkMode);\nconst colorScheme = computed(() => useColorSchemeStore().colorScheme);\nconst reportLineChart1Ref = ref();\n\nprovide(\"bind[reportLineChart1Ref]\", (el) => {\n  reportLineChart1Ref.value = el;\n});\n\nconst getGradient = (el) => {\n  const ctx = el.getContext(\"2d\");\n  const gradient = ctx.createLinearGradient(0, 0, 0, 400);\n  gradient.addColorStop(0, colors.primary(0.11));\n  gradient.addColorStop(1, darkMode.value ? \"#28344e00\" : \"#ffffff01\");\n  return gradient;\n};\n\nconst data = computed(() => {\n  return {\n    labels: [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ],\n    datasets: [\n      {\n        data: [0, 350, 250, 200, 500, 450, 850, 1050, 950, 1100, 900, 1200],\n        borderWidth: 1,\n        tension: 0.3,\n        pointBackgroundColor: \"#ffffff\" ,\n        backgroundColor : \"#91B4D2\" ,\n        fill: true,\n      },\n    ],\n  };\n});\n\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}