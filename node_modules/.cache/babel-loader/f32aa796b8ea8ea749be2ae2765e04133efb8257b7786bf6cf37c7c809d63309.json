{"ast":null,"code":"import { ref, reactive } from \"vue\";\nimport Vue from 'vue';\nexport default {\n  __name: 'Main',\n  setup(__props, {\n    expose\n  }) {\n    expose();\n    const isOpen = ref(false);\n    const inner_rect = ref(null);\n    const services = [{\n      title: 'Profile',\n      link: '#',\n      icon: 'fa-user'\n    }, {\n      title: 'Add Account',\n      link: '#',\n      icon: 'fa-edit'\n    }, {\n      title: 'Reset Password',\n      link: '#',\n      icon: 'fa-lock'\n    }, {\n      title: 'Help',\n      link: '#',\n      icon: 'fa-question-circle'\n    }];\n\n    // This variable will hold the reference to\n    // document's click handler\n    let handleOutsideClick;\n    Vue.directive('closable', {\n      bind(el, binding, vnode) {\n        // Here's the click/touchstart handler\n        // (it is registered below)\n        handleOutsideClick = e => {\n          e.stopPropagation();\n          // Get the handler method name and the exclude array\n          // from the object used in v-closable\n          const {\n            handler,\n            exclude\n          } = binding.value;\n          // This variable indicates if the clicked element is excluded\n          let clickedOnExcludedEl = false;\n          exclude.forEach(refName => {\n            // We only run this code if we haven't detected\n            // any excluded element yet\n            if (!clickedOnExcludedEl) {\n              // Get the element using the reference name\n              const excludedEl = vnode.context.$refs[refName];\n              // See if this excluded element\n              // is the same element the user just clicked on\n              clickedOnExcludedEl = excludedEl.contains(e.target);\n            }\n          });\n          // We check to see if the clicked element is not\n          // the dialog element and not excluded\n          if (!el.contains(e.target) && !clickedOnExcludedEl) {\n            // If the clicked element is outside the dialog\n            // and not the button, then call the outside-click handler\n            // from the same component this directive is used in\n            vnode.context[handler]();\n          }\n        };\n        // Register click/touchstart event listeners on the whole page\n        document.addEventListener('click', handleOutsideClick);\n        document.addEventListener('touchstart', handleOutsideClick);\n      },\n      unbind() {\n        // If the element that has v-closable is removed, then\n        // unbind click/touchstart listeners from the whole page\n        document.removeEventListener('click', handleOutsideClick);\n        document.removeEventListener('touchstart', handleOutsideClick);\n      }\n    });\n    const __returned__ = {\n      isOpen,\n      inner_rect,\n      services,\n      get handleOutsideClick() {\n        return handleOutsideClick;\n      },\n      set handleOutsideClick(v) {\n        handleOutsideClick = v;\n      },\n      ref,\n      reactive,\n      Vue\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"mappings":"AAgGI,SAASA,GAAG,EAAEC,QAAQ,QAAQ,KAAK;AACnC,OAAOC,GAAG,MAAM,KAAK;;;;;;;IAErB,MAAMC,MAAM,GAAGH,GAAG,CAAC,KAAK,CAAC;IACzB,MAAMI,UAAU,GAAGJ,GAAG,CAAC,IAAI,CAAC;IAK5B,MAAMK,QAAQ,GAAG,CACb;MACIC,KAAK,EAAE,SAAS;MAChBC,IAAI,EAAE,GAAG;MACTC,IAAI,EAAE;IACV,CAAC,EACD;MACIF,KAAK,EAAE,aAAa;MACpBC,IAAI,EAAE,GAAG;MACTC,IAAI,EAAE;IACV,CAAC,EACD;MACIF,KAAK,EAAE,gBAAgB;MACvBC,IAAI,EAAE,GAAG;MACTC,IAAI,EAAE;IACV,CAAC,EACD;MACIF,KAAK,EAAE,MAAM;MACbC,IAAI,EAAE,GAAG;MACTC,IAAI,EAAE;IACV,CAAC,CACJ;;IAIG;IACA;IACA,IAAIC,kBAAkB;IACtBP,GAAG,CAACQ,SAAS,CAAC,UAAU,EAAE;MAC1BC,IAAI,CAAEC,EAAE,EAAEC,OAAO,EAAEC,KAAK,EAAE;QACtB;QACA;QACAL,kBAAkB,GAAIM,CAAC,IAAK;UAC5BA,CAAC,CAACC,eAAe,EAAE;UACnB;UACA;UACA,MAAM;YAAEC,OAAO;YAAEC;UAAQ,CAAC,GAAGL,OAAO,CAACM,KAAK;UAC1C;UACA,IAAIC,mBAAmB,GAAG,KAAK;UAC/BF,OAAO,CAACG,OAAO,CAACC,OAAO,IAAI;YACvB;YACA;YACA,IAAI,CAACF,mBAAmB,EAAE;cAC1B;cACA,MAAMG,UAAU,GAAGT,KAAK,CAACU,OAAO,CAACC,KAAK,CAACH,OAAO,CAAC;cAC/C;cACA;cACAF,mBAAmB,GAAGG,UAAU,CAACG,QAAQ,CAACX,CAAC,CAACY,MAAM,CAAC;YACnD;UACJ,CAAC,CAAC;UACF;UACA;UACA,IAAI,CAACf,EAAE,CAACc,QAAQ,CAACX,CAAC,CAACY,MAAM,CAAC,IAAI,CAACP,mBAAmB,EAAE;YAChD;YACA;YACA;YACAN,KAAK,CAACU,OAAO,CAACP,OAAO,CAAC,EAAE;UAC5B;QACA,CAAC;QACD;QACAW,QAAQ,CAACC,gBAAgB,CAAC,OAAO,EAAEpB,kBAAkB,CAAC;QACtDmB,QAAQ,CAACC,gBAAgB,CAAC,YAAY,EAAEpB,kBAAkB,CAAC;MAC/D,CAAC;MACDqB,MAAM,GAAI;QACN;QACA;QACAF,QAAQ,CAACG,mBAAmB,CAAC,OAAO,EAAEtB,kBAAkB,CAAC;QACzDmB,QAAQ,CAACG,mBAAmB,CAAC,YAAY,EAAEtB,kBAAkB,CAAC;MAClE;IACI,CAAC,CAAC","names":["ref","reactive","Vue","isOpen","inner_rect","services","title","link","icon","handleOutsideClick","directive","bind","el","binding","vnode","e","stopPropagation","handler","exclude","value","clickedOnExcludedEl","forEach","refName","excludedEl","context","$refs","contains","target","document","addEventListener","unbind","removeEventListener"],"sources":["/Users/jisoo/Desktop/github/rocket-web/src/components/top-bar/Main.vue"],"sourcesContent":["<template>\n    <div class=\"top-bar\">\n        <nav aria-label=\"breadcrumb\" class=\"-intro-x hidden xl:flex\">\n            <ol class=\"breadcrumb text-white\">\n                <li class=\"breadcrumb-item\"><a href=\"#\">App</a>&nbsp;&nbsp;&gt;&nbsp;&nbsp;</li>\n                <li class=\"breadcrumb-item\"><a href=\"#\">Administrator</a>&nbsp;&nbsp;&gt;&nbsp;&nbsp;</li>\n                <li class=\"breadcrumb-item active text-slate-400\" aria-current=\"page\">Dashboard</li>\n            </ol>\n        </nav>   \n\n        <!-- BEGIN: Mobile Menu -->\n        <div class=\"-intro-x xl:hidden mr-3 sm:mr-6\">\n            <div\n                class=\"mobile-menu-toggler cursor-pointer\"\n                @click=\"$emit('setMobileMenu')\"\n            >\n                <iconf icon=\"fa-bars\" class=\"mobile-menu-toggler__icon transform\"/>\n            </div>\n        </div>\n    <!-- END: Mobile Menu -->\n\n\n        <div class=\"intro-x relative ml-auto sm:mx-auto\">\n            <div class=\"search hidden sm:block\">\n                <input\n                    type=\"text\"\n                    class=\"search__input form-control\"\n                    placeholder=\"Quick Search... (Ctrl+k)\"\n                />\n                <iconf icon=\"fa-solid fa-search\" class=\"search__icon text-white\"/>\n            </div>\n            <a class=\"notification sm:hidden\" href=\"\">\n                <SearchIcon class=\"notification__icon dark:text-slate-500 mr-5\" />\n            </a>\n        </div>\n        \n        <div class=\"intro-x mr-auto sm:mr-6\">\n            <div class=\"dropdown-toggle notification notification--bullet cursor-pointer\">\n                 <iconf icon=\"fa-solid fa-bell\" class=\"notification__icon text-white\"/>\n            </div>\n        </div>\n\n\n        <div class=\"intro-x mr-auto sm:mr-6\">\n            <div class=\"notification cursor-pointer\">\n                <iconf icon=\"fa-solid fa-inbox\" class=\"notification__icon text-white\"/>\n            </div>\n        </div>\n\n        <div class=\"dropdown intro-x text-slate-200 h-10\">\n\n            <div ref=\"button\" class=\"dropdown-toggle h-full flex item-center cursor-pointer\" @click=\"isOpen = !isOpen\">\n                <div class=\"w-10 h-10 image-fit\">\n                <img\n                    alt=\"Rocketman - HTML Admin Template\"\n                    class=\"rounded-full border-2 border-white border-opacity-10 shadow-lg\"\n                    src=\"@/assets/images/test-user.png\"\n                />\n                </div>\n                    <div class=\"hidden md:block ml-3\">\n                        <div class=\"max-w-[7rem] truncate font-medium text-white\">\n                                Denzel Washington\n                        </div>\n                    <div class=\"text-xs text-slate-400\">Software Engineer</div>\n                </div>\n            </div>\n            <transition name=\"fade\" appear>\n                <div \n                    class=\"dropdown-menu\" \n                    v-if=\"isOpen\"  \n                    v-closable=\"{\n                        exclude: ['button'],\n                        handler: 'onClose'\n                    }\" >\n                    <ul v-for=\"(item , i) in services\" :key=\"i\" class=\"dropdown-content\">\n                        <li>\n                            <iconf :icon=\"item.icon\" class=\"dropdown-icon text-slate-500\" />\n                            <a :href=\"item.link\" class=\"dropdown-item cursor-pointer\">{{ item.title }}</a>\n                        </li>\n                    </ul>\n                    <div class=\"dropdrow-divider\">\n                    </div>\n                    <ul class=\"dropdown-content\">\n                        <li>\n                            <iconf icon=\"fa-toggle-off\" class=\"dropdown-icon text-slate-500\" />\n                            <a href=\"#\" class=\"dropdown-item cursor-pointer\">Logout</a>\n                        </li>\n                    </ul>\n                </div>\n            </transition>\n        </div>\n\n    </div>\n</template>\n\n<script setup>\n    import { ref, reactive } from \"vue\";\n    import Vue from 'vue'\n\n    const isOpen = ref(false)\n    const inner_rect = ref(null);\n\n   \n\n\n    const services = [\n        {\n            title: 'Profile' ,\n            link: '#' ,\n            icon: 'fa-user' ,\n        },\n        {\n            title: 'Add Account' ,\n            link: '#' ,\n            icon: 'fa-edit' ,\n        },\n        {\n            title: 'Reset Password' ,\n            link: '#' ,\n            icon: 'fa-lock' ,\n        },\n        {\n            title: 'Help' ,\n            link: '#' ,\n            icon: 'fa-question-circle' ,\n        }\n    ]\n\n\n\n        // This variable will hold the reference to\n        // document's click handler\n        let handleOutsideClick\n        Vue.directive('closable', {\n        bind (el, binding, vnode) {\n            // Here's the click/touchstart handler\n            // (it is registered below)\n            handleOutsideClick = (e) => {\n            e.stopPropagation()\n            // Get the handler method name and the exclude array\n            // from the object used in v-closable\n            const { handler, exclude } = binding.value\n            // This variable indicates if the clicked element is excluded\n            let clickedOnExcludedEl = false\n            exclude.forEach(refName => {\n                // We only run this code if we haven't detected\n                // any excluded element yet\n                if (!clickedOnExcludedEl) {\n                // Get the element using the reference name\n                const excludedEl = vnode.context.$refs[refName]\n                // See if this excluded element\n                // is the same element the user just clicked on\n                clickedOnExcludedEl = excludedEl.contains(e.target)\n                }\n            })\n            // We check to see if the clicked element is not\n            // the dialog element and not excluded\n            if (!el.contains(e.target) && !clickedOnExcludedEl) {\n                // If the clicked element is outside the dialog\n                // and not the button, then call the outside-click handler\n                // from the same component this directive is used in\n                vnode.context[handler]()\n            }\n            }\n            // Register click/touchstart event listeners on the whole page\n            document.addEventListener('click', handleOutsideClick)\n            document.addEventListener('touchstart', handleOutsideClick)\n        },\n        unbind () {\n            // If the element that has v-closable is removed, then\n            // unbind click/touchstart listeners from the whole page\n            document.removeEventListener('click', handleOutsideClick)\n            document.removeEventListener('touchstart', handleOutsideClick)\n        }\n            })\n\n\n\n</script>\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}