{"ast":null,"code":"import { onMounted, ref, inject, watch } from \"vue\";\nimport Chart from \"chart.js/auto\";\nexport default {\n  __name: 'Main',\n  props: {\n    type: {\n      type: String,\n      required: true,\n      default: \"line\",\n      validator: value => {\n        return [\"line\", \"pie\", \"doughnut\", \"bar\"].indexOf(value) !== -1;\n      }\n    },\n    data: {\n      type: Object,\n      required: true,\n      default: () => ({})\n    },\n    options: {\n      type: Object,\n      default: () => ({})\n    },\n    width: {\n      type: [Number, String],\n      default: \"auto\"\n    },\n    height: {\n      type: [Number, String],\n      default: \"auto\"\n    },\n    refKey: {\n      type: String,\n      default: null\n    },\n    class: {\n      type: String,\n      default: \"\"\n    }\n  },\n  setup(__props, {\n    expose\n  }) {\n    expose();\n    const props = __props;\n    const chartRef = ref();\n    const init = () => {\n      const canvas = chartRef.value?.getContext(\"2d\");\n      const chart = new Chart(canvas, {\n        type: props.type,\n        // data: $h.toRaw(props.data),\n        data: props.data,\n        options: props.options\n      });\n      watch(props, () => {\n        // chart.data = $h.toRaw(props.data);\n        chart.data = props.data;\n        chart.options = props.options;\n        chart.update();\n      });\n\n      // Attach ChartJs instance\n      chartRef.value.instance = chart;\n    };\n    const bindInstance = () => {\n      if (props.refKey) {\n        const bind = inject(`bind[${props.refKey}]`);\n        if (bind) {\n          bind(chartRef.value);\n        }\n      }\n    };\n    onMounted(() => {\n      bindInstance();\n      init();\n    });\n    const __returned__ = {\n      props,\n      chartRef,\n      init,\n      bindInstance,\n      onMounted,\n      ref,\n      inject,\n      watch,\n      get Chart() {\n        return Chart;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"mappings":"AAYA,SAASA,SAAS,EAAEC,GAAG,EAAEC,MAAM,EAAEC,KAAK,QAAQ,KAAK;AACnD,OAAOC,KAAK,MAAM,eAAe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAsCjC,MAAMC,QAAQ,GAAGJ,GAAG,EAAE;IACtB,MAAMK,IAAI,GAAG,MAAM;MACjB,MAAMC,MAAM,GAAGF,QAAQ,CAACG,KAAK,EAAEC,UAAU,CAAC,IAAI,CAAC;MAC/C,MAAMC,KAAK,GAAG,IAAIN,KAAK,CAACG,MAAM,EAAE;QAC9BI,IAAI,EAAEC,KAAK,CAACD,IAAI;QAChB;QACAE,IAAI,EAAED,KAAK,CAACC,IAAI;QAChBC,OAAO,EAAEF,KAAK,CAACE;MACjB,CAAC,CAAC;MAEFX,KAAK,CAACS,KAAK,EAAE,MAAM;QACjB;QACAF,KAAK,CAACG,IAAI,GAAGD,KAAK,CAACC,IAAI;QACvBH,KAAK,CAACI,OAAO,GAAGF,KAAK,CAACE,OAAO;QAC7BJ,KAAK,CAACK,MAAM,EAAE;MAChB,CAAC,CAAC;;MAEF;MACAV,QAAQ,CAACG,KAAK,CAACQ,QAAQ,GAAGN,KAAK;IACjC,CAAC;IAED,MAAMO,YAAY,GAAG,MAAM;MACzB,IAAIL,KAAK,CAACM,MAAM,EAAE;QAChB,MAAMC,IAAI,GAAGjB,MAAM,CAAE,QAAOU,KAAK,CAACM,MAAO,GAAE,CAAC;QAC5C,IAAIC,IAAI,EAAE;UACRA,IAAI,CAACd,QAAQ,CAACG,KAAK,CAAC;QACtB;MACF;IACF,CAAC;IAEDR,SAAS,CAAC,MAAM;MACdiB,YAAY,EAAE;MACdX,IAAI,EAAE;IACR,CAAC,CAAC","names":["onMounted","ref","inject","watch","Chart","chartRef","init","canvas","value","getContext","chart","type","props","data","options","update","instance","bindInstance","refKey","bind"],"sources":["/Users/jisoo/Desktop/github/rocket-web/src/global-components/chart/Main.vue"],"sourcesContent":["<template>\n  <div\n    :style=\"{\n      width: `${width}px`,\n      height: `${height}px`,\n    }\"\n  >\n    <canvas ref=\"chartRef\" :class=\"class\"></canvas>\n  </div>\n</template>\n\n<script setup>\nimport { onMounted, ref, inject, watch } from \"vue\";\nimport Chart from \"chart.js/auto\";\n\nconst props = defineProps({\n  type: {\n    type: String,\n    required: true,\n    default: \"line\",\n    validator: (value) => {\n      return [\"line\", \"pie\", \"doughnut\", \"bar\"].indexOf(value) !== -1;\n    },\n  },\n  data: {\n    type: Object,\n    required: true,\n    default: () => ({}),\n  },\n  options: {\n    type: Object,\n    default: () => ({}),\n  },\n  width: {\n    type: [Number, String],\n    default: \"auto\",\n  },\n  height: {\n    type: [Number, String],\n    default: \"auto\",\n  },\n  refKey: {\n    type: String,\n    default: null,\n  },\n  class: {\n    type: String,\n    default: \"\",\n  },\n});\n\nconst chartRef = ref();\nconst init = () => {\n  const canvas = chartRef.value?.getContext(\"2d\");\n  const chart = new Chart(canvas, {\n    type: props.type,\n    // data: $h.toRaw(props.data),\n    data: props.data,\n    options: props.options,\n  });\n\n  watch(props, () => {\n    // chart.data = $h.toRaw(props.data);\n    chart.data = props.data;\n    chart.options = props.options;\n    chart.update();\n  });\n\n  // Attach ChartJs instance\n  chartRef.value.instance = chart;\n};\n\nconst bindInstance = () => {\n  if (props.refKey) {\n    const bind = inject(`bind[${props.refKey}]`);\n    if (bind) {\n      bind(chartRef.value);\n    }\n  }\n};\n\nonMounted(() => {\n  bindInstance();\n  init();\n});\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}